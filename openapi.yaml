openapi: 3.0.3
info:
  title: OneFace Attendance Management API
  description: REST API for OneFace attendance tracking and management system
  version: 1.0.0
  contact:
    name: OneFace API Support
    email: support@oneface.com

servers:
  - url: https://yns4a3sej4.execute-api.us-east-2.amazonaws.com/prod
    description: Production server
  - url: https://yns4a3sej4.execute-api.us-east-2.amazonaws.com/dev
    description: Development server

components:
  securitySchemes:
    CognitoJWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: AWS Cognito JWT token

  schemas:
    User:
      type: object
      properties:
        userID:
          type: string
          description: Unique identifier for the user
          example: "123e4567-e89b-12d3-a456-426614174000"
        Email:
          type: string
          format: email
          description: User's email address
          example: "student@example.edu"
        Name:
          type: string
          description: User's full name
          example: "John Doe"
        FacePrintID:
          type: string
          description: Face recognition ID (empty if not enrolled)
          example: "fp_12345"
        RoleID:
          type: string
          enum: [Student, Professor, Admin]
          description: User's role in the system
          example: "Student"
        EnrollmentDate:
          type: string
          format: date-time
          description: Date when user was enrolled
          example: "2025-06-28T10:30:00Z"

    Class:
      type: object
      properties:
        classID:
          type: string
          description: Unique identifier for the class
          example: "cs3162-002"
        className:
          type: string
          description: Class name
          example: "CS 3162.002"
        professorID:
          type: string
          description: ID of the professor teaching the class
          example: "prof-123"
        schedule:
          type: array
          items:
            type: object
            properties:
              dayOfWeek:
                type: string
                enum: [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday]
              startTime:
                type: string
                format: time
              endTime:
                type: string
                format: time

    AttendanceRecord:
      type: object
      properties:
        attendanceID:
          type: string
          description: Unique identifier for attendance record
        userID:
          type: string
          description: ID of the student
        classID:
          type: string
          description: ID of the class
        sessionDate:
          type: string
          format: date-time
          description: Date and time of the class session
        status:
          type: string
          enum: [Present, Absent, Tardy]
          description: Attendance status
        timestamp:
          type: string
          format: date-time
          description: When attendance was recorded

    Strike:
      type: object
      properties:
        strikeID:
          type: string
          description: Unique identifier for the strike
        userID:
          type: string
          description: ID of the student
        classID:
          type: string
          description: ID of the class
        reason:
          type: string
          description: Reason for the strike
        date:
          type: string
          format: date-time
          description: Date when strike was issued

    Error:
      type: object
      properties:
        message:
          type: string
          description: Error message
        error:
          type: string
          description: Detailed error information

security:
  - CognitoJWT: []

paths:
  /get_user:
    get:
      summary: Get current user information
      description: Retrieves the authenticated user's profile information and creates user record if it doesn't exist
      tags:
        - Users
      security:
        - CognitoJWT: []
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User added"
                  user:
                    $ref: '#/components/schemas/User'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    options:
      summary: CORS preflight request
      description: Handles CORS preflight requests
      tags:
        - CORS
      responses:
        '200':
          description: CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string

  /users/{userID}:
    get:
      summary: Get user by ID
      description: Retrieves user information by user ID
      tags:
        - Users
      parameters:
        - name: userID
          in: path
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /classes:
    get:
      summary: Get user's classes
      description: Retrieves all classes for the authenticated user
      tags:
        - Classes
      responses:
        '200':
          description: Classes retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Class'

  /classes/{classID}/attendance:
    get:
      summary: Get attendance for a class
      description: Retrieves attendance records for a specific class
      tags:
        - Attendance
      parameters:
        - name: classID
          in: path
          required: true
          schema:
            type: string
          description: Class ID
        - name: userID
          in: query
          schema:
            type: string
          description: Filter by specific user (optional)
        - name: startDate
          in: query
          schema:
            type: string
            format: date
          description: Filter from start date (optional)
        - name: endDate
          in: query
          schema:
            type: string
            format: date
          description: Filter to end date (optional)
      responses:
        '200':
          description: Attendance records retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttendanceRecord'

    post:
      summary: Record attendance
      description: Records attendance for a student in a class
      tags:
        - Attendance
      parameters:
        - name: classID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userID
                - status
              properties:
                userID:
                  type: string
                status:
                  type: string
                  enum: [Present, Absent, Tardy]
                sessionDate:
                  type: string
                  format: date-time
      responses:
        '201':
          description: Attendance recorded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttendanceRecord'

  /users/{userID}/strikes:
    get:
      summary: Get user's strikes
      description: Retrieves strike records for a specific user
      tags:
        - Strikes
      parameters:
        - name: userID
          in: path
          required: true
          schema:
            type: string
        - name: classID
          in: query
          schema:
            type: string
          description: Filter by specific class (optional)
      responses:
        '200':
          description: Strike records retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Strike'

    post:
      summary: Add a strike
      description: Adds a strike to a user's record
      tags:
        - Strikes
      parameters:
        - name: userID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - classID
                - reason
              properties:
                classID:
                  type: string
                reason:
                  type: string
      responses:
        '201':
          description: Strike added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Strike'

  /faceprint/enroll:
    post:
      summary: Enroll face print
      description: Enrolls a user's face print for attendance tracking
      tags:
        - Face Recognition
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - image
              properties:
                image:
                  type: string
                  format: binary
                  description: Face image for enrollment
      responses:
        '201':
          description: Face print enrolled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  facePrintID:
                    type: string
                  status:
                    type: string
                    example: "enrolled"

  /faceprint/verify:
    post:
      summary: Verify face print
      description: Verifies a face against enrolled face prints for attendance
      tags:
        - Face Recognition
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - image
                - classID
              properties:
                image:
                  type: string
                  format: binary
                classID:
                  type: string
      responses:
        '200':
          description: Face verified and attendance recorded
          content:
            application/json:
              schema:
                type: object
                properties:
                  userID:
                    type: string
                  confidence:
                    type: number
                  attendanceRecorded:
                    type: boolean

tags:
  - name: Users
    description: User management operations
  - name: Classes
    description: Class management operations
  - name: Attendance
    description: Attendance tracking operations
  - name: Strikes
    description: Strike management operations
  - name: Face Recognition
    description: Face recognition and enrollment operations
  - name: CORS
    description: CORS handling